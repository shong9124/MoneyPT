package com.capstone.presentation.view.chatBot

import android.text.Editable
import android.text.TextWatcher
import androidx.core.content.ContextCompat
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager // ÏàòÏ†ï Î∂ÄÎ∂Ñ
import com.capstone.data.util.MySharedPreferences
import com.capstone.domain.model.chat.PostMessage
import com.capstone.navigation.NavigationCommand
import com.capstone.navigation.NavigationRoutes
import com.capstone.presentation.R
import com.capstone.presentation.base.BaseFragment
import com.capstone.presentation.databinding.FragmentChatBotBinding
import com.capstone.presentation.util.UiState
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class ChatBotFragment : BaseFragment<FragmentChatBotBinding>() {

    @Inject
    lateinit var sharedPreferences: MySharedPreferences

    private var timeJob: Job? = null
    private val viewModel : ChatBotViewModel by viewModels()

    private lateinit var chatAdapter: ChatAdapter
    private val messages = mutableListOf<ChatMessage>()

    override fun initView() {

        setBottomNav()

        viewModel.getChatList(10)

        chatAdapter = ChatAdapter(messages)
        binding.rvChat.adapter = chatAdapter

        // ÌÖçÏä§Ìä∏ ÏûÖÎ†• Í∞êÏßÄÌïòÏó¨ Î≤ÑÌäº ÌôúÏÑ±/ÎπÑÌôúÏÑ±
        binding.etChatInput.addTextChangedListener(object : TextWatcher {
            override fun afterTextChanged(s: Editable?) {
                binding.btnSend.isEnabled = !s.isNullOrBlank()
                binding.btnSend.setBackgroundResource(R.drawable.ic_send_able)

                if (binding.etChatInput.text.toString() == "") {
                    binding.btnSend.setBackgroundResource(R.drawable.ic_send_disable)
                }
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
        })

        // Ï†ÑÏÜ° Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        binding.btnSend.setOnClickListener {
            val userMessage = binding.etChatInput.text.toString()
            if (userMessage.isNotBlank()) {
                // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÎ•º UIÏóê Î®ºÏ†Ä Ï∂îÍ∞Ä
                messages.add(ChatMessage(userMessage, isUser = true))
                chatAdapter.notifyItemInserted(messages.size - 1)
                binding.rvChat.scrollToPosition(messages.size - 1)

                // ViewModelÏùÑ ÌÜµÌï¥ ÏÑúÎ≤ÑÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ°
                viewModel.sendChat(
                    embedding = true,
                    postMessage = PostMessage(
                        requestMessage = userMessage,
                        summary = "" // ÏÑúÎ≤Ñ ÏùëÎãµÏóê Ìè¨Ìï®Îê®
                    )
                )

                binding.etChatInput.text.clear()
            }
        }
    }

    private fun addInitialBotMessages() {
        val welcomeMessage = """
        ÏïàÎÖïÌïòÏÑ∏Ïöî! Í∏àÏúµ ÏÉÅÌíà Ï∂îÏ≤ú Ï±óÎ¥áÏûÖÎãàÎã§ üòä
        Ïõî ÏÜåÎìù, ÌòÑÏû¨ ÏûêÏÇ∞ Îì± Ï†ïÎ≥¥Î•º Ï£ºÏãúÎ©¥ ÎßûÏ∂§ ÏÉÅÌíàÏùÑ Ï∂îÏ≤úÌï¥ÎìúÎ¶¥Í≤åÏöî!
        ÏïÑÎûò ÏûÖÎ†•Ï∞ΩÏóê ÏõêÌïòÎäî Ï†ïÎ≥¥Î•º ÏûêÏú†Î°≠Í≤å ÏûÖÎ†•Ìï¥Î≥¥ÏÑ∏Ïöî.
    """.trimIndent()

        messages.add(ChatMessage(welcomeMessage, isUser = false))
        chatAdapter.notifyItemInserted(messages.size - 1)
        binding.rvChat.scrollToPosition(messages.size - 1)
    }

    override fun setObserver() {
        super.setObserver()

        // Ï±ÑÌåÖ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        viewModel.getChatListState.observe(viewLifecycleOwner) { state ->
            when (state) {
                is UiState.Loading -> {
                    // ÌïÑÏöî Ïãú Î°úÎî© UI Ï≤òÎ¶¨
                }
                is UiState.Success -> {
                    // üîß Î™®Îì† Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî (Î°úÎî© Î©îÏãúÏßÄ Ï†úÍ±∞ Î™©Ï†Å)
                    messages.clear()
                    chatAdapter.notifyDataSetChanged()

                    val chatList = state.data
                    if (chatList.isNullOrEmpty()) {
                        addInitialBotMessages()
                    } else {
                        // ‚ö†Ô∏è Ïó¨Í∏∞ÏÑú chatListÎ•º Ïó≠ÏàúÏúºÎ°ú Ï≤òÎ¶¨Ìï¥ÏÑú Ïò§ÎûòÎêú Î©îÏãúÏßÄÍ∞Ä Î®ºÏ†Ä Ïò§ÎèÑÎ°ù
                        chatList.asReversed().forEach { chat ->
                            messages.add(ChatMessage(chat.requestMessage, isUser = true))
                            messages.add(ChatMessage(chat.responseMessage, isUser = false))
                        }
                        chatAdapter.notifyDataSetChanged()
                        // ÏµúÏã† Î©îÏãúÏßÄÍ∞Ä Îß® ÏïÑÎûòÏù¥ÎØÄÎ°ú ÎßàÏßÄÎßâ ÏúÑÏπòÎ°ú Ïä§ÌÅ¨Î°§
                        binding.rvChat.scrollToPosition(messages.size - 1)
                    }
                }
                is UiState.Error -> {
                    showToast("Ï±ÑÌåÖ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: ${state.message}")
                    addInitialBotMessages()
                }
            }
        }

        viewModel.sendChatState.observe(viewLifecycleOwner) { state ->
            when (state) {
                is UiState.Loading -> {
                    // Ï§ëÎ≥µÎêú Î°úÎî© Î©îÏãúÏßÄ Ï∂îÍ∞Ä Î∞©ÏßÄ
                    val hasLoading = messages.any { it.isLoading }
                    if (!hasLoading) {
                        messages.add(ChatMessage(message = "", isUser = false, isLoading = true))
                        chatAdapter.notifyItemInserted(messages.size - 1)
                        binding.rvChat.scrollToPosition(messages.size - 1)
                    }
                }

                is UiState.Success -> {
                    // ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍ∞Ä Î°úÎî©Ïù¥Î©¥ Ï†úÍ±∞
                    if (messages.isNotEmpty() && messages.last().isLoading) {
                        val lastIndex = messages.size - 1
                        messages.removeAt(lastIndex)
                        chatAdapter.notifyItemRemoved(lastIndex)
                    }

                    // Î¥á ÏùëÎãµ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                    val botResponse = state.data.responseMessage
                    messages.add(ChatMessage(botResponse, isUser = false))
                    chatAdapter.notifyItemInserted(messages.size - 1)
                    binding.rvChat.scrollToPosition(messages.size - 1)
                }

                is UiState.Error -> {
                    // ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍ∞Ä Î°úÎî©Ïù¥Î©¥ Ï†úÍ±∞
                    if (messages.isNotEmpty() && messages.last().isLoading) {
                        val lastIndex = messages.size - 1
                        messages.removeAt(lastIndex)
                        chatAdapter.notifyItemRemoved(lastIndex)
                    }

                    showToast("Ï±óÎ¥á ÏùëÎãµ Ïã§Ìå®: ${state.message}")
                }
            }
        }
    }


    private fun setBottomNav(){
        binding.bottomNav.ivChat.setImageResource(R.drawable.ic_chat_able)
        binding.bottomNav.tvChat.setTextColor(ContextCompat.getColor(requireContext(), R.color.primary))

        binding.bottomNav.menuRecommend.setOnClickListener {
            timeJob?.cancel()
            lifecycleScope.launch {
                navigationManager.navigate(
                    NavigationCommand.ToRoute(NavigationRoutes.RecommendFinancailItem)
                )
            }
        }

        binding.bottomNav.menuMyPage.setOnClickListener {
            timeJob?.cancel()
            lifecycleScope.launch {
                navigationManager.navigate(
                    NavigationCommand.ToRoute(NavigationRoutes.MyPage)
                )
            }
        }
    }
}
